{"version":3,"sources":["webpack:///./src/app/layout/users/users-routing.module.ts","webpack:///./src/app/layout/users/users.component.html","webpack:///./src/app/layout/users/users.component.scss","webpack:///./src/app/layout/users/users.component.ts","webpack:///./src/app/layout/users/users.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEJ;AAEnD,IAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+DAAc;KAC5B;CACJ,CAAC;AAMF;IAAA;IAAiC,CAAC;IAArB,kBAAkB;QAJ9B,8DAAQ,CAAC;YACN,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SAC1B,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAA;AAAH;;;;;;;;;;;;AChB/B,q8BAAq8B,gqBAAgqB,kqBAAkqB,yNAAyN,orBAAorB,onDAAonD,mBAAmB,+PAA+P,kBAAkB,wPAAwP,eAAe,45CAA45C,2EAA2E,+JAA+J,gFAAgF,+JAA+J,+EAA+E,+JAA+J,+EAA+E,iQAAiQ,2BAA2B,iN;;;;;;;;;;;ACAjwP,yBAAyB,gBAAgB,EAAE,qBAAqB,oBAAoB,gBAAgB,EAAE,wBAAwB,uBAAuB,EAAE,cAAc,4BAA4B,iBAAiB,EAAE,YAAY,0BAA0B,iBAAiB,EAAE,YAAY,uBAAuB,EAAE,qFAAqF,0BAA0B,EAAE,qCAAqC,8BAA8B,EAAE,wFAAwF,4BAA4B,iCAAiC,sFAAsF,8BAA8B,iCAAiC,+CAA+C,2uD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAjvB;AACF;AACG;AAErB;AACsB;AACvB;AAGpB;AACI;AAe3C;IAaI,wBAAoB,kBAAoC,EAAS,MAAqB,EAAS,MAAc,EAAS,WAAwB,EAAS,MAAiB,EAAS,YAA0B;QAAvL,uBAAkB,GAAlB,kBAAkB,CAAkB;QAAS,WAAM,GAAN,MAAM,CAAe;QAAS,WAAM,GAAN,MAAM,CAAQ;QAAS,gBAAW,GAAX,WAAW,CAAa;QAAS,WAAM,GAAN,MAAM,CAAW;QAAS,iBAAY,GAAZ,YAAY,CAAc;QAV3M,gBAAW,GAAY,IAAI,CAAC;QAC5B,eAAU,GAAY,KAAK,CAAC;QAG5B,qBAAgB,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAQ5D,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACnC,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACtC,QAAQ,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACnC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,KAAK,EAAE,yDAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnF,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;SACxC,CAAC,CAAC;QAEH,mBAAmB;QACnB,IAAM,KAAK,GAAe,EAAE,CAAC;QAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;SAChC;QAED,0DAA0D;IAC9D,CAAC;IAED,sCAAa,GAAb,UAAc,OAAoB;QAAlC,iBAYC;QAXG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,OAAO,KAAI,CAAC,YAAY,CAAC,cAAc,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,aAAG;gBAChE,IAAG,GAAG,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC;oBAChB,OAAO,CAAC,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;;oBAEnC,OAAO,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,EAAC,aAAG,IAAG,CAAC,CAAC,CAAC;YAEX,sCAAsC;QAC1C,CAAC,CAAC;IAEN,CAAC;IAED,+BAAM,GAAN;QAAA,iBAeC;QAdC,oDAAoD;QACnD,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,SAAS,CACrD,aAAG;YACF,KAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;YACtB,KAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,KAAI,CAAC,QAAQ,EAAE,CAAC;YAEhB,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,2BAA2B,CAAC,CAAC;QAGrD,CAAC,EACF,aAAG,IAAG,CAAC,CACV,CAAC;IAEL,CAAC;IAED,6CAAoB,GAApB;QACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7B,CAAC;IACD,8CAAqB,GAArB;QACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAE5B,CAAC;IACD,iCAAQ,GAAR;QAAA,iBASC;QAPG,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,GAAG;YAC1C,KAAI,CAAC,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACxC,KAAI,CAAC,UAAU,GAAG,IAAI,oEAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YACnD,KAAI,CAAC,UAAU,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC;YAC3C,KAAI,CAAC,UAAU,CAAC,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC;QAErC,CAAC,EAAE,aAAG,IAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IACD,uCAAc,GAAd,UAAe,KAAK,EAAC,MAAM;QAA3B,iBAcC;QAbG,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5B,KAAK,CAAC,MAAM,CAAC,CAAC;QACd,IAAI,SAAS,GAAC,EAAC,MAAM,EAAC,CAAC,EAAC,CAAC;QACzB,IAAG,KAAK,CAAC,OAAO,EAAC;YACb,SAAS,CAAC,MAAM,GAAC,CAAC,CAAC;SAEtB;QACD,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,MAAM,EAAC,SAAS,CAAC,CAAC,SAAS,CAC1D,UAAC,GAAO;YACJ,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,EAAE,oCAAoC,CAAC,CAAC;QAClE,CAAC,EACD,UAAC,GAAO,IAAI,CAAC,CAChB,CAAC;IACN,CAAC;IAED,iCAAQ,GAAR;QACI,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,UAAC,GAAG;YAC1C,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;QACpB,CAAC,EACG,aAAG,IAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAC9B,CAAC;QAEF,IAAI,CAAC,QAAQ,EAAE,CAAC;IAIpB,CAAC;IAED,oCAAW,GAAX,UAAY,WAAmB;QAC3B,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,oBAAoB;QACtD,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,2CAA2C;QACpF,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC;QACrC,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC3B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACzC;IACL,CAAC;IACD,mCAAU,GAAV;QAAA,iBAUC;QATG,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6FAAmB,EAAE;YACpD,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE;SACjD,CAAC,CAAC;QAEH,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,gBAAM;YACpC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAtHwB;QAAxB,+DAAS,CAAC,8DAAY,CAAC;kCAAY,8DAAY;qDAAC;IAC7B;QAAnB,+DAAS,CAAC,yDAAO,CAAC;kCAAO,yDAAO;gDAAC;IAXzB,cAAc;QAL1B,+DAAS,CAAC;YACP,QAAQ,EAAE,WAAW;YACrB,0GAAqC;;SAExC,CAAC;yCAcyC,+DAAiB,EAAiB,wDAAa,EAAiB,sDAAM,EAAsB,0DAAW,EAAiB,2DAAS,EAAuB,mEAAY;OAblM,cAAc,CAkI1B;IAAD,qBAAC;CAAA;AAlI0B;AAsI3B,+CAA+C;AAC/C,IAAM,MAAM,GAAG;IACX,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,OAAO;IACP,QAAQ;IACR,SAAS;IACT,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,MAAM;CACT,CAAC;AACF,IAAM,KAAK,GAAG;IACV,GAAG;IACH,OAAO;IACP,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,MAAM;IACN,WAAW;IACX,UAAU;IACV,MAAM;IACN,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,WAAW;CACd,CAAC;AASF,qCAAqC;AACrC,SAAS,aAAa,CAAC,EAAU;IAC7B,IAAM,IAAI,GACN,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACrD,GAAG;QACH,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/D,GAAG,CAAC;IAER,OAAO;QACH,EAAE,EAAE,EAAE,CAAC,QAAQ,EAAE;QACjB,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE;QACpD,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACjE,CAAC;AACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5N8C;AACN;AACU;AACwC;AACxC;AAE+B;AAGtB;AACT;AAC+B;AACpB;AAGc;AACvB;AACe;AA0BpE;IAAA;IAA0B,CAAC;IAAd,WAAW;QAxBvB,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY;gBACZ,wEAAkB;gBAClB,mFAAoB;gBACpB,gEAAc;gBACd,oEAAkB;gBAClB,oEAAkB;gBAClB,iEAAe;gBACf,+DAAa;gBACb,mEAAiB;gBACjB,uEAAqB;gBACrB,iEAAe;gBACf,+DAAa;gBACb,gEAAc;gBACd,2EAAe;gBACf,kEAAmB;aACtB;YACD,YAAY,EAAE,CAAC,+DAAc,CAAC;YAC9B,eAAe,EAAE;gBACb,6FAAmB;aAEtB;SACJ,CAAC;OACW,WAAW,CAAG;IAAD,kBAAC;CAAA;AAAH","file":"users-users-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { UsersComponent } from './users.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: UsersComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class UsersRoutingModule {}\n","module.exports = \"<div *ngIf=\\\"createUser\\\" fxFlex>\\n    <mat-card>\\n        <mat-card-header>\\n            <mat-card-title>\\n                <div class=\\\"text-center\\\">\\n                    Create User\\n                </div>\\n            </mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content>\\n            <!-- <h1 class=\\\"app-name\\\">Sb Admin Material</h1> -->\\n            <form [formGroup]=\\\"userForm\\\" (ngSubmit)=\\\"onSave()\\\" class=\\\"login-form\\\" fxFlex>\\n                <div fxFlex fxlayout=\\\"row\\\" fxlayout.lt-md=\\\"column\\\">\\n                    <div fxFlexFill>\\n                        <mat-form-field class=\\\"w-100\\\">\\n                            <input matInput placeholder=\\\"Firstname\\\" formControlName=\\\"firstName\\\">\\n                            <mat-error>\\n                                <span *ngIf=\\\"userForm.controls['firstName'].hasError('required')\\\">Firstname is\\n                                    <strong>required &nbsp;</strong>\\n                                </span>\\n                            </mat-error>\\n\\n                        </mat-form-field>\\n                    </div>\\n                </div>\\n                <div fxFlex fxlayout=\\\"row\\\" fxlayout.lt-md=\\\"column\\\">\\n                    <div fxFlexFill>\\n                        <mat-form-field class=\\\"w-100\\\">\\n                            <input matInput placeholder=\\\"Lastname\\\" formControlName=\\\"lastName\\\">\\n                            <mat-error>\\n                                <span *ngIf=\\\"userForm.controls['lastName'].hasError('required')\\\">Lastname is\\n                                    <strong>required &nbsp;</strong>\\n                                </span>\\n                            </mat-error>\\n                        </mat-form-field>\\n\\n                    </div>\\n                </div>\\n\\n                <div fxFlex fxlayout=\\\"row\\\" fxlayout.lt-md=\\\"column\\\">\\n                    <div fxFlexFill>\\n                        <mat-form-field class=\\\"w-100\\\">\\n                            <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\">\\n                            <mat-error>\\n                                <span *ngIf=\\\"userForm.controls['email'].hasError('isEmailUnique')\\\">Email is\\n                                    <strong>already exists. &nbsp;</strong>\\n                                </span>\\n                                <span *ngIf=\\\"userForm.controls['email'].hasError('required')\\\">Email is\\n                                    <strong>required &nbsp;</strong>\\n                                </span>\\n\\n                            </mat-error>\\n\\n                        </mat-form-field>\\n                    </div>\\n                </div>\\n                <div fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\">\\n                    <div fxFlexFill>\\n                        <mat-form-field class=\\\"w-100\\\">\\n                            <input matInput type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\">\\n                            <mat-error>\\n                                <span *ngIf=\\\"userForm.controls['password'].hasError('required')\\\">Password is\\n                                    <strong>required &nbsp;</strong>\\n                                </span>\\n                            </mat-error>\\n                        </mat-form-field>\\n                    </div>\\n                </div>\\n\\n                <div fxFlex fxLayout=\\\"row\\\" fxLayout.lt-md=\\\"column\\\">\\n                    <div fxFlexFill>\\n                        <button [disabled]=\\\"!userForm.valid\\\" type=\\\"submit\\\" mat-raised-button color=\\\"primary\\\" class=\\\"w-100 mr-10\\\">Save</button>\\n                        <button mat-raised-button color=\\\"primary\\\" class=\\\"w-100\\\" (click)=\\\"onActivateUserListing()\\\">Cancel</button>\\n                    </div>\\n                </div>\\n\\n            </form>\\n        </mat-card-content>\\n    </mat-card>\\n</div>\\n\\n<!--  listing of the users -->\\n\\n<div fxFlex *ngIf=\\\"userListing\\\">\\n    <mat-card>\\n        <mat-card-header>\\n            <mat-card-title>Users\\n\\n                <button style=\\\"text-align:right\\\" (click)=\\\"onActivateCreateUser()\\\" mat-raised-button color=\\\"primary\\\">Add</button>\\n\\n            </mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content>\\n\\n\\n            <mat-form-field>\\n                <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n            </mat-form-field>\\n\\n            <div class=\\\"mat-elevation-z8\\\">\\n                <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\" [class.isMobile]=\\\"isMobile\\\" matsort>\\n                    <ng-container matColumnDef=\\\"firstName\\\">\\n                        <th mat-header-cell *matHeaderCellDef> First Name </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.firstname}} </td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"lastName\\\">\\n                        <th mat-header-cell *matHeaderCellDef> Last Name </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.lastname}} </td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"email\\\">\\n                        <th mat-header-cell *matHeaderCellDef> Email </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.email}} </td>\\n                    </ng-container>\\n\\n                    <ng-container matColumnDef=\\\"status\\\">\\n                        <th mat-header-cell *matHeaderCellDef>Action</th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                            \\n                            <!-- <button mat-mini-fab color=\\\"primary\\\">\\n                                <mat-icon>edit</mat-icon>\\n                            </button> -->\\n\\n                            <mat-slide-toggle *ngIf=\\\"element.status == 0\\\"  (change)=\\\"onStatusChange($event,element.userId)\\\" class=\\\"\\\" [color]=\\\"color\\\" [checked]=\\\"'false'\\\" [disabled]=\\\"'false'\\\">\\n\\n                            </mat-slide-toggle>\\n                            <mat-slide-toggle *ngIf=\\\"element.status == 1\\\"  (change)=\\\"onStatusChange($event,element.userId)\\\" class=\\\"\\\" [color]=\\\"color\\\" [checked]=\\\"'true'\\\" [disabled]=\\\"'false'\\\">\\n\\n                            </mat-slide-toggle>\\n\\n                        </td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"action\\\">\\n                        <th mat-header-cell *matHeaderCellDef> Details </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                            <button mat-raised-button class=\\\"bggreen\\\">loc 1</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Failed'?'red':'green','color':'white'}\\\">Loc\\n                                2</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Completed' ?'green':'grey','color':'white'}\\\">Loc\\n                                3</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Completed'?'green':'grey','color':'white'}\\\">Loc\\n                                4</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Completed'?'green':'grey','color':'white'}\\\">Loc\\n                                5</button>\\n                        </td>\\n                    </ng-container>\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n                </table>\\n\\n                <mat-paginator [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n            </div>\\n        </mat-card-content>\\n    </mat-card>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.mat-form-field {\\n  font-size: 14px;\\n  width: 100%; }\\n\\n.mat-table th,\\ntd {\\n  text-align: center; }\\n\\n.bggreen {\\n  background-color: green;\\n  color: white; }\\n\\n.bgred {\\n  background-color: red;\\n  color: white; }\\n\\n.mr-10 {\\n  margin-right: 10px; }\\n\\n/* CSS to change Default/'Accent' color */\\n\\n::ng-deep .mat-slide-toggle-thumb {\\n  background-color: red; }\\n\\n::ng-deep .mat-slide-toggle-bar {\\n  background-color: #66222c; }\\n\\n::ng-deep .mat-slide-toggle.mat-checked:not(.mat-disabled) .mat-slide-toggle-thumb {\\n  background-color: green;\\n  /*replace with your color*/ }\\n\\n::ng-deep .mat-slide-toggle.mat-checked:not(.mat-disabled) .mat-slide-toggle-bar {\\n  background-color: #164424;\\n  /*replace with your color*/ }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211bS1kZXZlbG9wZXI0L0Rlc2t0b3AvdGVzdC9hbmd1bGFyLW1hdGVyaWFsL2dpdC9hZG1pbi9zcmMvYXBwL2xheW91dC91c2Vycy91c2Vycy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLFdBQVcsRUFBQTs7QUFHZjtFQUNJLGVBQWU7RUFDZixXQUFXLEVBQUE7O0FBR2Y7O0VBRUksa0JBQWtCLEVBQUE7O0FBR3RCO0VBQ0ksdUJBQXVCO0VBQ3ZCLFlBQ0osRUFBQTs7QUFFQTtFQUNJLHFCQUFxQjtFQUNyQixZQUNKLEVBQUE7O0FBQ0E7RUFBTyxrQkFBaUIsRUFBQTs7QUFJeEIseUNBQUE7O0FBRUE7RUFDSSxxQkFBcUIsRUFBQTs7QUFFekI7RUFDSSx5QkFBeUIsRUFBQTs7QUFHN0I7RUFDSSx1QkFBdUI7RUFBRSwwQkFBQSxFQUEyQjs7QUFHeEQ7RUFDSSx5QkFBd0I7RUFBRywwQkFBQSxFQUEyQiIsImZpbGUiOiJzcmMvYXBwL2xheW91dC91c2Vycy91c2Vycy5jb21wb25lbnQuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC1mb3JtLWZpZWxkIHtcbiAgICBmb250LXNpemU6IDE0cHg7XG4gICAgd2lkdGg6IDEwMCU7XG59XG5cbi5tYXQtdGFibGUgdGgsXG50ZCB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4uYmdncmVlbiB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XG4gICAgY29sb3I6IHdoaXRlXG59XG5cbi5iZ3JlZCB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xuICAgIGNvbG9yOiB3aGl0ZVxufVxuLm1yLTEwe21hcmdpbi1yaWdodDoxMHB4O31cblxuXG5cbi8qIENTUyB0byBjaGFuZ2UgRGVmYXVsdC8nQWNjZW50JyBjb2xvciAqL1xuXG46Om5nLWRlZXAgLm1hdC1zbGlkZS10b2dnbGUtdGh1bWIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cbjo6bmctZGVlcCAubWF0LXNsaWRlLXRvZ2dsZS1iYXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICM2NjIyMmM7XG59XG5cbjo6bmctZGVlcCAubWF0LXNsaWRlLXRvZ2dsZS5tYXQtY2hlY2tlZDpub3QoLm1hdC1kaXNhYmxlZCkgLm1hdC1zbGlkZS10b2dnbGUtdGh1bWIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuOyAvKnJlcGxhY2Ugd2l0aCB5b3VyIGNvbG9yKi9cbn1cblxuOjpuZy1kZWVwIC5tYXQtc2xpZGUtdG9nZ2xlLm1hdC1jaGVja2VkOm5vdCgubWF0LWRpc2FibGVkKSAubWF0LXNsaWRlLXRvZ2dsZS1iYXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IzE2NDQyNDsgIC8qcmVwbGFjZSB3aXRoIHlvdXIgY29sb3IqL1xufVxuXG5cblxuIl19 */\"","import { Component, OnInit, ViewChild,ChangeDetectorRef  } from '@angular/core';\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\n\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { DialogLogsComponent } from '../shared/dialog-logs/dialog-logs.component';\nimport { IndexService } from '../../shared/services/index';\nimport { resolve } from 'path';\nimport { reject } from 'q';\nimport {Router} from \"@angular/router\";\nimport { ToastrService } from 'ngx-toastr';\n\nexport interface PeriodicElement {\n    firstName: string;\n    lastName: string;\n    email: string;\n    status: string;\n    color: string;\n}\n\n@Component({\n    selector: 'app-users',\n    templateUrl: './users.component.html',\n    styleUrls: ['./users.component.scss']\n})\nexport class UsersComponent implements OnInit {\n    animal: string;\n    name: string;\n    userListing: boolean = true;\n    createUser: boolean = false;\n    userForm: FormGroup;\n\n    displayedColumns = ['firstName', 'lastName', 'email', 'status'];\n    dataSource: MatTableDataSource<any>;\n\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n    constructor(private changeDetectorRefs:ChangeDetectorRef,private toastr: ToastrService,private router: Router,private formBuilder: FormBuilder, public dialog: MatDialog, public indexService: IndexService) {\n\n        this.userForm = this.formBuilder.group({\n            firstName: ['', [Validators.required]],\n            lastName: ['', Validators.required],\n            email: ['', [Validators.email, Validators.required], this.isEmailUnique.bind(this)],\n            password: ['', [Validators.required]]\n        });\n\n        // Create 100 users\n        const users: UserData[] = [];\n        for (let i = 1; i <= 100; i++) {\n            users.push(createNewUser(i));\n        }\n\n        // this.dataSource = new MatTableDataSource(ELEMENT_DATA);\n    }\n\n    isEmailUnique(control: FormControl) {\n        return new Promise((resolve, reject) => {\n            return this.indexService.getUserByEmail(control.value).subscribe(res=>{\n                if(res.data.length>0)\n                    resolve({ 'isEmailUnique': true });\n                else\n                    resolve(null);\n            },err=>{});\n            \n            //resolve({ 'isEmailUnique': false });\n        })\n\n    }\n\n    onSave() {\n      // console.log(JSON.stringify(this.userForm.value));\n       this.indexService.saveUser(this.userForm.value).subscribe(\n           res=>{\n            this.userForm.reset();\n            this.onActivateUserListing();\n            this.loadData();\n            \n            this.toastr.success('', 'User Saved Successfully !');\n      \n                \n            },\n           err=>{}\n       );\n      \n    }\n\n    onActivateCreateUser() {\n        this.createUser = true;\n        this.userListing = false;\n    }\n    onActivateUserListing() {\n        this.createUser = false;\n        this.userListing = true;\n\n    }\n    loadData(){\n        \n        this.indexService.getAllusers().subscribe((res) => {\n            this.changeDetectorRefs.detectChanges();            \n            this.dataSource = new MatTableDataSource(res.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n            \n        }, err => { console.log(err) });\n    }\n    onStatusChange(event,userId) {\n        console.log('Toggle fired');\n        alert(userId);\n        let statusObj={status:0};\n        if(event.checked){\n            statusObj.status=1;\n\n        }\n        this.indexService.updateUserStatus(userId,statusObj).subscribe(\n            (res:any)=>{\n                this.toastr.success('', 'User Status Changed Successfully !');\n            },\n            (err:any)=>{}\n        );\n    }\n\n    ngOnInit() {\n        this.indexService.getUserById().subscribe((res) => {\n            console.log(res)\n        },\n            err => { console.log(err) }\n        );\n\n        this.loadData();\n\n        \n\n    }\n\n    applyFilter(filterValue: string) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\n        this.dataSource.filter = filterValue;\n        if (this.dataSource.paginator) {\n            this.dataSource.paginator.firstPage();\n        }\n    }\n    openDialog(): void {\n        const dialogRef = this.dialog.open(DialogLogsComponent, {\n            width: '550px',\n            data: { name: this.name, animal: this.animal }\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.animal = result;\n        });\n    }\n   \n}\n\n\n\n/** Constants used to fill up our data base. */\nconst COLORS = [\n    'maroon',\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'purple',\n    'fuchsia',\n    'lime',\n    'teal',\n    'aqua',\n    'blue',\n    'navy',\n    'black',\n    'gray'\n];\nconst NAMES = [\n    ' ',\n    'Asher',\n    'Olivia',\n    'Atticus',\n    'Amelia',\n    'Jack',\n    'Charlotte',\n    'Theodore',\n    'Isla',\n    'Oliver',\n    'Isabella',\n    'Jasper',\n    'Cora',\n    'Levi',\n    'Violet',\n    'Arthur',\n    'Mia',\n    'Thomas',\n    'Elizabeth'\n];\n\nexport interface UserData {\n    id: string;\n    name: string;\n    progress: string;\n    color: string;\n}\n\n/** Builds and returns a new User. */\nfunction createNewUser(id: number): UserData {\n    const name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] +\n        ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) +\n        '.';\n\n    return {\n        id: id.toString(),\n        name: name,\n        progress: Math.round(Math.random() * 100).toString(),\n        color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material';\nimport { MatFormFieldModule, MatPaginatorModule,MatDialogModule } from '@angular/material';\nimport { MatInputModule } from '@angular/material';\n\nimport { MatButtonModule, MatCardModule, MatIconModule } from '@angular/material';\nimport { MatGridListModule } from '@angular/material/grid-list';\n\nimport { UsersRoutingModule } from './users-routing.module';\nimport { UsersComponent } from './users.component';\nimport { DialogLogsComponent } from '../shared/dialog-logs/dialog-logs.component';\nimport {DashboardModule} from '../dashboard/dashboard.module';\n\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCheckboxModule,MatButtonToggleModule } from '@angular/material';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n@NgModule({\n    imports: [\n        CommonModule,        \n        UsersRoutingModule,\n        MatSlideToggleModule,\n        MatTableModule,\n        MatFormFieldModule,\n        MatPaginatorModule,\n        MatButtonModule,\n        MatCardModule,\n        MatCheckboxModule,\n        MatButtonToggleModule,\n        MatDialogModule,\n        MatIconModule,\n        MatInputModule,\n        DashboardModule,\n        ReactiveFormsModule\n    ],\n    declarations: [UsersComponent],\n    entryComponents: [\n        DialogLogsComponent\n      \n    ]\n})\nexport class UsersModule {}"],"sourceRoot":""}