{"version":3,"sources":["webpack:///./src/app/layout/tables/tables-routing.module.ts","webpack:///./src/app/layout/tables/tables.component.html","webpack:///./src/app/layout/tables/tables.component.scss","webpack:///./src/app/layout/tables/tables.component.ts","webpack:///./src/app/layout/tables/tables.module.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAyC;AACc;AAEF;AAErD,IAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,iEAAe;KAC7B;CACJ,CAAC;AAMF;IAAA;IAAkC,CAAC;IAAtB,mBAAmB;QAJ/B,8DAAQ,CAAC;YACN,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;SAC1B,CAAC;OACW,mBAAmB,CAAG;IAAD,0BAAC;CAAA;AAAH;;;;;;;;;;;;AChBhC,+tBAA+tB,kCAAkC,qPAAqP,qCAAqC,iQAAiQ,sEAAsE,qQAAqQ,sDAAsD,sSAAsS,eAAe,oGAAoG,gBAAgB,kGAAkG,cAAc,2YAA2Y,+HAA+H,uBAAuB,wKAAwK,uBAAuB,sKAAsK,uBAAuB,kaAAka,2EAA2E,8HAA8H,gFAAgF,8HAA8H,+EAA+E,8HAA8H,+EAA+E,oOAAoO,2BAA2B,iN;;;;;;;;;;;ACAv6I,yBAAyB,gBAAgB,EAAE,qBAAqB,oBAAoB,gBAAgB,EAAE,wBAAwB,uBAAuB,EAAE,cAAc,4BAA4B,iBAAiB,EAAE,YAAY,0BAA0B,iBAAiB,EAAE,+CAA+C,u2B;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA/P;AACiB;AACnB;AACC;AACsB;AAYlF,4CAA4C;AAC5C,iLAAiL;AACjL,gLAAgL;AAChL,2KAA2K;AAC3K,iLAAiL;AACjL,gLAAgL;AAChL,2KAA2K;AAC3K,gLAAgL;AAChL,KAAK;AAOL;IAUI,yBAAmB,MAAiB,EAAS,YAA0B;QAApD,WAAM,GAAN,MAAM,CAAW;QAAS,iBAAY,GAAZ,YAAY,CAAc;QANvE,qBAAgB,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,WAAW,EAAE,iBAAiB,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAQvF,yDAAyD;IAC7D,CAAC;IAED,kCAAQ,GAAR;QAAA,iBASC;QARG,6DAA6D;QAC7D,IAAI,CAAC,YAAY,CAAC,eAAe,EAAE,CAAC,SAAS,CAAC,UAAC,MAAU;YACrD,KAAI,CAAC,UAAU,GAAG,IAAI,oEAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACtD,KAAI,CAAC,UAAU,CAAC,SAAS,GAAG,KAAI,CAAC,SAAS,CAAC;YAC3C,KAAI,CAAC,UAAU,CAAC,IAAI,GAAG,KAAI,CAAC,IAAI,CAAC;QACrC,CAAC,EAAE,aAAG,IAAM,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAC,CAAC,CAAC,CAAC;IAGpC,CAAC;IAED,qCAAW,GAAX,UAAY,WAAe;QACvB,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,oBAAoB;QACtD,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,2CAA2C;QAEpF,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC;QAErC,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;YAC3B,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;SACzC;IACL,CAAC;IACD,oCAAU,GAAV,UAAW,IAAI,EAAE,EAAE;QAAnB,iBAUC;QATG,IAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,6FAAmB,EAAE;YACpD,KAAK,EAAE,OAAO;YACd,IAAI,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE;SAC/B,CAAC,CAAC;QAEH,SAAS,CAAC,WAAW,EAAE,CAAC,SAAS,CAAC,gBAAM;YACpC,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;YACrC,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAvCwB;QAAxB,+DAAS,CAAC,8DAAY,CAAC;kCAAY,8DAAY;sDAAC;IAC7B;QAAnB,+DAAS,CAAC,yDAAO,CAAC;kCAAO,yDAAO;iDAAC;IARzB,eAAe;QAL3B,+DAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,6GAAsC;;SAEzC,CAAC;yCAW6B,2DAAS,EAAuB,mEAAY;OAV9D,eAAe,CA+C3B;IAAD,sBAAC;CAAA;AA/C2B;AAiD5B,+CAA+C;AAC/C,IAAM,MAAM,GAAG;IACX,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,QAAQ;IACR,OAAO;IACP,OAAO;IACP,QAAQ;IACR,SAAS;IACT,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,OAAO;IACP,MAAM;CACT,CAAC;AACF,IAAM,KAAK,GAAG;IACV,MAAM;IACN,OAAO;IACP,QAAQ;IACR,SAAS;IACT,QAAQ;IACR,MAAM;IACN,WAAW;IACX,UAAU;IACV,MAAM;IACN,QAAQ;IACR,UAAU;IACV,QAAQ;IACR,MAAM;IACN,MAAM;IACN,QAAQ;IACR,QAAQ;IACR,KAAK;IACL,QAAQ;IACR,WAAW;CACd,CAAC;AASF,qCAAqC;AACrC,SAAS,aAAa,CAAC,EAAU;IAC7B,IAAM,IAAI,GACN,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACrD,GAAG;QACH,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAC/D,GAAG,CAAC;IAER,OAAO;QACH,EAAE,EAAE,EAAE,CAAC,QAAQ,EAAE;QACjB,IAAI,EAAE,IAAI;QACV,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC,CAAC,QAAQ,EAAE;QACpD,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACjE,CAAC;AACN,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7I8C;AACN;AACU;AACwC;AACxC;AAE+B;AAGpB;AACT;AAC6B;AACpB;AAsB9D;IAAA;IAA2B,CAAC;IAAf,YAAY;QApBxB,8DAAQ,CAAC;YACN,OAAO,EAAE;gBACL,4DAAY;gBACZ,0EAAmB;gBACnB,gEAAc;gBACd,oEAAkB;gBAClB,oEAAkB;gBAClB,iEAAe;gBACf,+DAAa;gBACb,iEAAe;gBACf,+DAAa;gBACb,gEAAc;gBACd,2EAAe;aAClB;YACD,YAAY,EAAE,CAAC,iEAAe,CAAC;YAC/B,eAAe,EAAE;gBACb,6FAAmB;aAEtB;SACJ,CAAC;OACW,YAAY,CAAG;IAAD,mBAAC;CAAA;AAAH","file":"tables-tables-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { TablesComponent } from './tables.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: TablesComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class TablesRoutingModule {}\n","module.exports = \"<div fxFlex>\\n    <mat-card>\\n        <mat-card-header>\\n            <mat-card-title>Transports</mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content>\\n            <mat-form-field>\\n                <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\n            </mat-form-field>\\n\\n            <div class=\\\"mat-elevation-z8\\\">\\n\\n                <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\" [class.isMobile]=\\\"isMobile\\\" matsort>\\n                    <ng-container matColumnDef=\\\"process\\\">\\n                        <th mat-header-cell *matHeaderCellDef> Process </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\">{{element.fileRegistry.processName}} </td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"data\\\">\\n                        <th mat-header-cell *matHeaderCellDef>Data </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.fileRegistry.sourceDataName}} </td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"startDate\\\">\\n                        <th mat-header-cell *matHeaderCellDef> Start Date </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.fileRegistry.processTimeStamp*1000 | date:'MM/dd/yyyy H:m:s'}}</td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"lastUpdatedDate\\\">\\n                        <th mat-header-cell *matHeaderCellDef>Last Updated</th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\">{{element.lastTimeStamp*1000 |date: 'MM/dd/yyyy H:m:s'}} </td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"status\\\">\\n                        <th mat-header-cell *matHeaderCellDef>Status</th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                            <span [ngStyle]=\\\"{'color':'blue'}\\\" *ngIf=\\\"element.status == 0\\\">In-Progress</span>\\n                            <span [ngStyle]=\\\"{'color':'green'}\\\" *ngIf=\\\"element.status == 1\\\">Completed</span>\\n                            <span [ngStyle]=\\\"{'color':'red'}\\\" *ngIf=\\\"element.status == 2\\\">Failed</span>\\n                        </td>\\n                    </ng-container>\\n                    <ng-container matColumnDef=\\\"action\\\">\\n                        <th mat-header-cell *matHeaderCellDef> Details </th>\\n                        <td mat-cell *matCellDef=\\\"let element\\\">\\n                            <span *ngFor=\\\"let  location of element.route; let idx = index\\\">\\n                                <button *ngIf=\\\"location.status==0\\\" mat-raised-button class=\\\"bggrey\\\">{{location.locationName}}</button>\\n                                <button (click)=\\\"openDialog(location.type,location.id)\\\" *ngIf=\\\"location.status==1\\\" mat-raised-button class=\\\"bggreen\\\">{{location.locationName}}</button>\\n                                <button (click)=\\\"openDialog(location.type,location.id)\\\" *ngIf=\\\"location.status==2\\\" mat-raised-button class=\\\"bgred\\\">{{location.locationName}}</button>\\n                                <span *ngIf=\\\"element.route.length > idx+1\\\">\\n                                    <b>==></b>\\n                                </span>\\n                            </span>\\n\\n                            <!-- <button mat-raised-button class=\\\"bggreen\\\">loc 1</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Failed'?'red':'green','color':'white'}\\\">Loc 2</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Completed' ?'green':'grey','color':'white'}\\\">Loc 3</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Completed'?'green':'grey','color':'white'}\\\">Loc 4</button>\\n                            <b>==></b>\\n                            <button mat-raised-button [ngStyle]=\\\"{'background-color':element.status==='Completed'?'green':'grey','color':'white'}\\\">Loc 5</button> -->\\n                        </td>\\n                    </ng-container>\\n                    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n                    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n                </table>\\n\\n                <mat-paginator [pageSize]=\\\"10\\\" [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\\n            </div>\\n        </mat-card-content>\\n    </mat-card>\"","module.exports = \"table {\\n  width: 100%; }\\n\\n.mat-form-field {\\n  font-size: 14px;\\n  width: 100%; }\\n\\n.mat-table th,\\ntd {\\n  text-align: center; }\\n\\n.bggreen {\\n  background-color: green;\\n  color: white; }\\n\\n.bgred {\\n  background-color: red;\\n  color: white; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL211bS1kZXZlbG9wZXI0L0Rlc2t0b3AvdGVzdC9hbmd1bGFyLW1hdGVyaWFsL2dpdC9hZG1pbi9zcmMvYXBwL2xheW91dC90YWJsZXMvdGFibGVzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksV0FBVyxFQUFBOztBQUdmO0VBQ0ksZUFBZTtFQUNmLFdBQVcsRUFBQTs7QUFHZjs7RUFFSSxrQkFBa0IsRUFBQTs7QUFHdEI7RUFDSSx1QkFBdUI7RUFDdkIsWUFDSixFQUFBOztBQUVBO0VBQ0kscUJBQXFCO0VBQ3JCLFlBQ0osRUFBQSIsImZpbGUiOiJzcmMvYXBwL2xheW91dC90YWJsZXMvdGFibGVzLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xuICAgIHdpZHRoOiAxMDAlO1xufVxuXG4ubWF0LWZvcm0tZmllbGQge1xuICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuLm1hdC10YWJsZSB0aCxcbnRkIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi5iZ2dyZWVuIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcbiAgICBjb2xvcjogd2hpdGVcbn1cblxuLmJncmVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XG4gICAgY29sb3I6IHdoaXRlXG59Il19 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort, MatTableDataSource } from '@angular/material';\nimport { IndexService } from '../../shared/services/index';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { DialogLogsComponent } from '../shared/dialog-logs/dialog-logs.component';\n\nexport interface PeriodicElement {\n    data: string;\n    process: string;\n    startDate: string;\n    action: string;\n    lastUpdatedDate: string;\n    status: string;\n    color: string;\n}\n\n// const ELEMENT_DATA: PeriodicElement[] = [\n//     { process: \"FCC_Fin1\", data: 'chart_of_ac1', startDate: \"05/05/19 12:10:10\", lastUpdatedDate: \"05/05/19 12:10:10\", status: \"In-Progress\", action: 'Logs', color: \"blue\" },\n//     { process: \"FCC_Fin1\", data: 'chart_of_ac1', startDate: \"05/06/19 13:10:10\", lastUpdatedDate: \"05/05/19 12:10:10\", status: \"Completed\", action: 'Logs', color: \"green\" },\n//     { process: \"FCC_Fin1\", data: 'chart_of_ac1', startDate: \"05/07/19 14:10:10\", lastUpdatedDate: \"05/05/19 12:10:10\", status: \"Failed\", action: 'Logs', color: \"red\" },\n//     { process: \"FCC_Fin1\", data: 'chart_of_ac1', startDate: \"05/08/19 15:10:10\", lastUpdatedDate: \"05/05/19 12:10:10\", status: \"In-Progress\", action: 'Logs', color: \"blue\" },\n//     { process: \"FCC_Fin1\", data: 'chart_of_ac1', startDate: \"05/09/19 16:10:10\", lastUpdatedDate: \"05/05/19 12:10:10\", status: \"Completed\", action: 'Logs', color: \"green\" },\n//     { process: \"FCC_Fin1\", data: 'chart_of_ac1', startDate: \"05/10/19 17:10:10\", lastUpdatedDate: \"05/05/19 12:10:10\", status: \"Failed\", action: 'Logs', color: \"red\" },\n//     { process: \"FCC_Fin1\", data: 'chart_of_ac1', startDate: \"05/11/19 18:10:10\", lastUpdatedDate: \"05/05/19 12:10:10\", status: \"In-Progress\", action: 'Logs', color: \"blue\" }\n// ];\n\n@Component({\n    selector: 'app-tables',\n    templateUrl: './tables.component.html',\n    styleUrls: ['./tables.component.scss']\n})\nexport class TablesComponent implements OnInit {\n    animal: string;\n    name: string;\n\n    displayedColumns = ['process', 'data', 'startDate', 'lastUpdatedDate', 'status', 'action'];\n    dataSource: MatTableDataSource<any>;\n\n    @ViewChild(MatPaginator) paginator: MatPaginator;\n    @ViewChild(MatSort) sort: MatSort;\n\n    constructor(public dialog: MatDialog, public indexService: IndexService) {\n      \n        //this.dataSource = new MatTableDataSource(ELEMENT_DATA);\n    }\n\n    ngOnInit() {\n        // Assign the data to the data source for the table to render\n        this.indexService.getFileRegistry().subscribe((result:any) => {     \n            this.dataSource = new MatTableDataSource(result.data);\n            this.dataSource.paginator = this.paginator;\n            this.dataSource.sort = this.sort;\n        }, err => { console.log(err) });\n\n       \n    }\n\n    applyFilter(filterValue:any) {\n        filterValue = filterValue.trim(); // Remove whitespace\n        filterValue = filterValue.toLowerCase(); // Datasource defaults to lowercase matches\n        \n        this.dataSource.filter = filterValue;\n\n        if (this.dataSource.paginator) {\n            this.dataSource.paginator.firstPage();\n        }\n    }\n    openDialog(type, id): void {\n        const dialogRef = this.dialog.open(DialogLogsComponent, {\n            width: '550px',\n            data: { type: type, id: id }\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            console.log('The dialog was closed');\n            this.animal = result;\n        });\n    }\n}\n\n/** Constants used to fill up our data base. */\nconst COLORS = [\n    'maroon',\n    'red',\n    'orange',\n    'yellow',\n    'olive',\n    'green',\n    'purple',\n    'fuchsia',\n    'lime',\n    'teal',\n    'aqua',\n    'blue',\n    'navy',\n    'black',\n    'gray'\n];\nconst NAMES = [\n    'Maia',\n    'Asher',\n    'Olivia',\n    'Atticus',\n    'Amelia',\n    'Jack',\n    'Charlotte',\n    'Theodore',\n    'Isla',\n    'Oliver',\n    'Isabella',\n    'Jasper',\n    'Cora',\n    'Levi',\n    'Violet',\n    'Arthur',\n    'Mia',\n    'Thomas',\n    'Elizabeth'\n];\n\nexport interface UserData {\n    id: string;\n    name: string;\n    progress: string;\n    color: string;\n}\n\n/** Builds and returns a new User. */\nfunction createNewUser(id: number): UserData {\n    const name =\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))] +\n        ' ' +\n        NAMES[Math.round(Math.random() * (NAMES.length - 1))].charAt(0) +\n        '.';\n\n    return {\n        id: id.toString(),\n        name: name,\n        progress: Math.round(Math.random() * 100).toString(),\n        color: COLORS[Math.round(Math.random() * (COLORS.length - 1))]\n    };\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatTableModule } from '@angular/material';\nimport { MatFormFieldModule, MatPaginatorModule,MatDialogModule } from '@angular/material';\nimport { MatInputModule } from '@angular/material';\n\nimport { MatButtonModule, MatCardModule, MatIconModule } from '@angular/material';\nimport { MatGridListModule } from '@angular/material/grid-list';\n\nimport { TablesRoutingModule } from './tables-routing.module';\nimport { TablesComponent } from './tables.component';\nimport { DialogLogsComponent } from '../shared/dialog-logs/dialog-logs.component';\nimport {DashboardModule} from '../dashboard/dashboard.module';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        TablesRoutingModule,\n        MatTableModule,\n        MatFormFieldModule,\n        MatPaginatorModule,\n        MatButtonModule,\n        MatCardModule,\n        MatDialogModule,\n        MatIconModule,\n        MatInputModule,\n        DashboardModule\n    ],\n    declarations: [TablesComponent],\n    entryComponents: [\n        DialogLogsComponent\n      \n    ]\n})\nexport class TablesModule {}\n"],"sourceRoot":""}